// File generated by directus-schema-types. Do not change.

import { DirectusUsersPrimaryKey, DirectusUsers } from './directus_users';
import { RecipesIngredientsPrimaryKey, RecipesIngredients } from './recipes_ingredients';

// --- ingredients ---

export type IngredientsPrimaryKeyField = 'id';
export type IngredientsPrimaryKey = number;

export interface Ingredients {
    // Type: timestamp
    readonly date_created?: Date | null;

    // Type: timestamp
    readonly date_updated?: Date | null;

    // Type: string
    description_long: string | null;

    // Type: string
    description_short: string | null;

    // Type: integer
    readonly id?: number;

    // Type: string
    name?: string | null;

    // Type: string
    readonly user_created?: string | null;

    // Type: string
    readonly user_updated?: string | null;
}

export interface IngredientsRelations {
    recipes: (RecipesIngredientsPrimaryKey | RecipesIngredients)[];

    user_created: DirectusUsersPrimaryKey | DirectusUsers;

    user_updated: DirectusUsersPrimaryKey | DirectusUsers;
}

/**
 * IngredientsRelatedCollections maps the {@link IngredientsRelations}
 * fields to the name of the related collection.
 */
export interface IngredientsRelatedCollections {
    recipes: 'recipes_ingredients';
    user_created: 'directus_users';
    user_updated: 'directus_users';
}

export type IngredientsPayload = Omit<Ingredients, 'date_created' | 'date_updated'> & {
    // Type: timestamp
    readonly date_created?: string | null;

    // Type: timestamp
    readonly date_updated?: string | null;
};

/**
 * @param v The payload to parse.
 * @returns The payload parsed to {@link Ingredients}.
 */
export function parseIngredientsPayload(v: IngredientsPayload): Ingredients {
    const r = v as Record<keyof Ingredients, unknown>;
    if (v.date_created) {
        r.date_created = new Date(v.date_created);
    }
    if (v.date_updated) {
        r.date_updated = new Date(v.date_updated);
    }
    return r as Ingredients;
}
