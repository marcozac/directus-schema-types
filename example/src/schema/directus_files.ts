// File generated by directus-schema-types. Do not change.

import { DirectusFoldersPrimaryKey, DirectusFolders } from './directus_folders';
import { DirectusUsersPrimaryKey, DirectusUsers } from './directus_users';

// --- directus_files ---

export type DirectusFilesPrimaryKeyField = 'id';
export type DirectusFilesPrimaryKey = string;

export interface DirectusFiles {
    // Type: string
    readonly charset?: string | null;

    // Type: dateTime
    readonly created_on?: Date;

    // Type: text
    description?: string | null;

    // Type: integer
    readonly duration?: number | null;

    // Type: string
    embed?: string | null;

    // Type: string
    readonly filename_disk?: string | null;

    // Type: string
    filename_download?: string;

    // Type: bigInteger
    readonly filesize?: number | null;

    // Type: integer
    focal_point_x?: number | null;

    // Type: integer
    focal_point_y?: number | null;

    // Type: string
    readonly folder?: string | null;

    // Type: integer
    readonly height?: number | null;

    // Type: uuid
    id?: string;

    // Type: text
    location?: string | null;

    // Type: json
    metadata?: object | null;

    // Type: string
    readonly modified_by?: string | null;

    // Type: dateTime
    readonly modified_on?: Date;

    // Type: string
    readonly storage?: string;

    // Type: json
    tags?: object | null;

    // Type: string
    title?: string | null;

    // Type: json
    tus_data?: object | null;

    // Type: string
    tus_id?: string | null;

    // Type: string
    readonly type?: string | null;

    // Type: string
    uploaded_by?: string | null;

    // Type: dateTime
    uploaded_on?: Date | null;

    // Type: integer
    readonly width?: number | null;
}

export interface DirectusFilesRelations {
    folder: DirectusFoldersPrimaryKey | DirectusFolders;

    modified_by: DirectusUsersPrimaryKey | DirectusUsers;

    uploaded_by: DirectusUsersPrimaryKey | DirectusUsers;
}

export type DirectusFilesPayload = Omit<DirectusFiles, 'created_on' | 'modified_on' | 'uploaded_on'> & {
    // Type: dateTime
    readonly created_on?: string;

    // Type: dateTime
    readonly modified_on?: string;

    // Type: dateTime
    uploaded_on?: string | null;
};

/**
 * @param v The payload to parse.
 * @returns The payload parsed to {@link DirectusFiles}.
 */
export function parseDirectusFilesPayload(v: DirectusFilesPayload): DirectusFiles {
    const r = v as Record<keyof DirectusFiles, unknown>;
    if (v.created_on) {
        r.created_on = new Date(v.created_on);
    }
    if (v.modified_on) {
        r.modified_on = new Date(v.modified_on);
    }
    if (v.uploaded_on) {
        r.uploaded_on = new Date(v.uploaded_on);
    }
    return r as DirectusFiles;
}
