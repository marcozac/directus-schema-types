// File generated by directus-schema-types. Do not change.

import { DirectusSharesPrimaryKey, DirectusShares } from './directus_shares';
import { DirectusUsersPrimaryKey, DirectusUsers } from './directus_users';

// --- directus_sessions ---

export type DirectusSessionsPrimaryKeyField = 'token';
export type DirectusSessionsPrimaryKey = string;

export interface DirectusSessions {
    // Type: dateTime
    expires?: Date;

    // Type: string
    ip?: string | null;

    // Type: string
    next_token?: string | null;

    // Type: string
    origin?: string | null;

    // Type: string
    share?: string | null;

    // Type: string
    token?: string;

    // Type: string
    user?: string | null;

    // Type: text
    user_agent?: string | null;
}

export interface DirectusSessionsRelations {
    share: DirectusSharesPrimaryKey | DirectusShares;

    user: DirectusUsersPrimaryKey | DirectusUsers;
}

export type DirectusSessionsPayload = Omit<DirectusSessions, 'expires'> & {
    // Type: dateTime
    expires?: string;
};

/**
 * @param v The payload to parse.
 * @returns The payload parsed to {@link DirectusSessions}.
 */
export function parseDirectusSessionsPayload(v: DirectusSessionsPayload): DirectusSessions {
    const r: Record<string, unknown> = v;
    if (v.expires) {
        r.expires = new Date(v.expires);
    }
    return r as DirectusSessions;
}
