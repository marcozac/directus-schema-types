// File generated by directus-schema-types. Do not change.

import { DirectusOperationsPrimaryKey, DirectusOperations } from './directus_operations';
import { DirectusUsersPrimaryKey, DirectusUsers } from './directus_users';

// --- directus_flows ---

export type DirectusFlowsPrimaryKeyField = 'id';
export type DirectusFlowsPrimaryKey = string;

export interface DirectusFlows {
    // Type: string
    accountability?: string | null;

    // Type: string
    color?: string | null;

    // Type: dateTime
    date_created?: Date | null;

    // Type: text
    description?: string | null;

    // Type: string
    icon?: string | null;

    // Type: uuid
    id?: string;

    // Type: string
    name?: string;

    // Type: string
    operation?: string | null;

    // Type: json
    options?: object | null;

    // Type: string
    status?: string;

    // Type: string
    trigger?: string | null;

    // Type: string
    user_created?: string | null;
}

export interface DirectusFlowsRelations {
    operation: DirectusOperationsPrimaryKey | DirectusOperations;

    operations: (DirectusOperationsPrimaryKey | DirectusOperations)[];

    user_created: DirectusUsersPrimaryKey | DirectusUsers;
}

/**
 * DirectusFlowsRelatedCollections maps the {@link DirectusFlowsRelations}
 * fields to the name of the related collection.
 */
export interface DirectusFlowsRelatedCollections {
    operation: 'directus_operations';
    operations: 'directus_operations';
    user_created: 'directus_users';
}

export type DirectusFlowsPayload = Omit<DirectusFlows, 'date_created'> & {
    // Type: dateTime
    date_created?: string | null;
};

/**
 * @param v The payload to parse.
 * @returns The payload parsed to {@link DirectusFlows}.
 */
export function parseDirectusFlowsPayload(v: DirectusFlowsPayload): DirectusFlows {
    const r = v as Record<keyof DirectusFlows, unknown>;
    if (v.date_created) {
        r.date_created = new Date(v.date_created);
    }
    return r as DirectusFlows;
}
