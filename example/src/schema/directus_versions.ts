// File generated by directus-schema-types. Do not change.

import { DirectusCollectionsPrimaryKey, DirectusCollections } from './directus_collections';
import { DirectusUsersPrimaryKey, DirectusUsers } from './directus_users';

// --- directus_versions ---

export type DirectusVersionsPrimaryKeyField = 'id';
export type DirectusVersionsPrimaryKey = string;

export interface DirectusVersions {
    // Type: string
    collection?: string;

    // Type: timestamp
    date_created?: Date | null;

    // Type: timestamp
    date_updated?: Date | null;

    // Type: string
    readonly hash?: string | null;

    // Type: uuid
    readonly id?: string;

    // Type: string
    item?: string;

    // Type: string
    key?: string;

    // Type: string
    name?: string | null;

    // Type: string
    user_created?: string | null;

    // Type: string
    user_updated?: string | null;
}

export interface DirectusVersionsRelations {
    collection: DirectusCollectionsPrimaryKey | DirectusCollections;

    user_created: DirectusUsersPrimaryKey | DirectusUsers;

    user_updated: DirectusUsersPrimaryKey | DirectusUsers;
}

export type DirectusVersionsPayload = Omit<DirectusVersions, 'date_created' | 'date_updated'> & {
    // Type: timestamp
    date_created?: string | null;

    // Type: timestamp
    date_updated?: string | null;
};

/**
 * @param v The payload to parse.
 * @returns The payload parsed to {@link DirectusVersions}.
 */
export function parseDirectusVersionsPayload(v: DirectusVersionsPayload): DirectusVersions {
    const r = v as Record<keyof DirectusVersions, unknown>;
    if (v.date_created) {
        r.date_created = new Date(v.date_created);
    }
    if (v.date_updated) {
        r.date_updated = new Date(v.date_updated);
    }
    return r as DirectusVersions;
}
