{{- define "collection" }}
{{- $pascalName := ToPascalCase $.Name }}
// --- {{ $.Name }} ---

export type {{ $pascalName }}PrimaryKeyField = "{{ $.PrimaryKeyField }}";
export type {{ $pascalName }}PrimaryKey = {{ $.PrimaryKeyTsType.Type }};

export interface {{ $pascalName }} {
	{{- range $spec := $.Fields }}
	{{- template "collection/field" $spec }}
	{{- end }}
}

export interface {{ $pascalName }}Relations {
	{{- range $spec := $.Relations }}
	{{- template "collection/relation" $spec }}
	{{- end }}
}
{{- end }}

{{/* Collection Field */}}
{{- define "collection/field" }}
	{{ with $.Note }}// {{ . }} {{- end }}
	// Type: {{ $.FieldType }}
	{{ if $.IsReadonly }}readonly {{ end }}
	{{- $.Name }}
	{{- if not $.IsRequired }}?{{ end }}: {{ $.TsType.Type }}
	{{- if $.IsNullable }} | null{{ end }};
{{ end }}

{{/* Collection Relation */}}
{{- define "collection/relation" }}
{{- if $.Unique }}
	/**
	* NOTE
	* The related field of {@link {{ ToPascalCase $.RelatedCollection }}} is marked as unique.
	* The resulting array will contain only one element.
	*/
{{- end }}
	{{ $.Field }}:
	{{- if $.Many }} ({{ template "collection/relation/fieldType" $ }})[]
	{{- else }} {{ template "collection/relation/fieldType" $ }}
	{{- end }}
{{ end }}

{{/* Collection Relation - Field Type */}}
{{/* Is the single-element type of a relational field. */}}
{{- define "collection/relation/fieldType" }}
	{{- ToPascalCase $.RelatedCollection }}PrimaryKey | {{ ToPascalCase $.RelatedCollection }}
{{- end }}
