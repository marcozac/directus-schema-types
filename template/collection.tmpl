{{/* collections.ts is a block to generate a collection file. */}}
{{- block "collection.ts" $ }}
{{- template "header" $ }}
{{ template "collection" $ }}
{{- end }}

{{/* collections is the definition of the all collection interfaces. */}}
{{- define "collections" }}
{{- range $.Values }}
	{{- template "collection" . }}
{{ end }}
{{- end }}

{{/* collection is a single collection definition. */}}
{{- define "collection" }}
// --- {{ $.Name }} ---

export type {{ $.PrimaryKey.FieldTypeName }} = "{{ $.PrimaryKey.FieldType }}";
export type {{ $.PrimaryKey.TypeName }} = {{ $.PrimaryKey.Type }};

export interface {{ $.TypeName }} {
	{{- range $.Fields.Values }}
	{{- template "collection/field" . }}
	{{- end }}
}

export interface {{ $.RelationsTypeName }} {
	{{- range $.Relations.Values }}
	{{- template "collection/relation" . }}
	{{- end }}
}

{{ template "collection/payload" $ }}
{{- end }}

{{/* Collection Field */}}
{{- define "collection/field" }}
	{{ with $.Note }}// {{ . }} {{- end }}
	// Type: {{ $.FieldType }}
	{{ if $.IsReadonly }}readonly {{ end }}
	{{- $.Name }}
	{{- if not $.IsRequired }}?{{ end }}: {{ $.Type }}
	{{- if $.IsNullable }} | null{{ end }};
{{ end }}

{{/* Collection Relation */}}
{{- define "collection/relation" }}
{{- if $.Unique }}
	/**
	* NOTE
	* The related field of {@link {{ $.RelatedCollection.TypeName }}} is marked as unique.
	* The resulting array will contain only one element.
	*/
{{- end }}
	{{ $.Field }}:
	{{- if $.Many }} ({{ template "collection/relation/fieldType" $ }})[]
	{{- else }} {{ template "collection/relation/fieldType" $ }}
	{{- end }}
{{ end }}

{{/* Collection Relation - Field Type */}}
{{/* Is the single-element type of a relational field. */}}
{{- define "collection/relation/fieldType" }}
	{{- $.RelatedCollection.PrimaryKey.TypeName }} | {{ $.RelatedCollection.TypeName }}
{{- end }}


{{/* collection/payload is the definition of a collection payload and its parser. */}}
{{- define "collection/payload" }}
{{- $typeDecl := printf "export type %s =" $.PayloadTypeName }}
{{- $funcDecl := printf "export function parse%s(v: %s): %s" $.PayloadTypeName $.PayloadTypeName $.TypeName }}
{{- with $.PayloadFields }}
{{ $typeDecl }} Omit<{{ $.TypeName }}, {{ unionType .Keys true }}> & {
{{- range .Values }}
	{{- template "collection/field" . }}
{{- end }}
};

/**
 * @param v The payload to parse.
 * @returns The payload parsed to {@link {{ $.TypeName }}}.
 */
{{ $funcDecl }} {
	const r = v as Record<keyof {{ $.TypeName }}, unknown>;
	{{- range .Values }}
	if (v.{{ .Name }}) {
		r.{{ .Name }} = {{ parserOf .Spec.Type }}(v.{{ .Name }});
	}
	{{- end }}
	return r as {{ $.TypeName }};
}

{{- else }}
// The payload is the same as the schema definition.
{{ $typeDecl }} {{ $.TypeName }};

/**
 * @param v The payload to parse.
 * @returns The payload as it is received: it is the same as the schema definition.
 */
{{ $funcDecl }} {
	return v;
}
{{- end }}
{{- end }}
